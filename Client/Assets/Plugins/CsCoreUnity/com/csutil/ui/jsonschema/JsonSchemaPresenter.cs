using Newtonsoft.Json.Linq;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.UI;

namespace com.csutil.ui.jsonschema {

    /// <summary> A generic presenter that can be used with a view that was generated by a
    /// Json schema (see JsonSchemaToView) and can load a model instance via 
    /// presenter.LoadViaJsonIntoView(..) </summary>
    public class JsonSchemaPresenter : Presenter<JObject> {

        public GameObject targetView { get; set; }
        public JsonSchemaToView viewGenerator;

        public JsonSchemaPresenter(JsonSchemaToView viewGenerator) { this.viewGenerator = viewGenerator; }

        public async Task OnLoad(JObject root) { await targetView.LinkToJsonModel(root, viewGenerator); }

        public static async Task ChangesSavedViaConfirmButton(GameObject targetView, string confirmButtonId = "ConfirmButton") {
            do {
                await ConfirmButtonClicked(targetView, confirmButtonId);
            } while (!RegexValidator.IsAllInputCurrentlyValid(targetView));
        }

        private static Task ConfirmButtonClicked(GameObject targetView, string confirmButtonId) {
            return targetView.GetLinkMap().Get<Button>(confirmButtonId).SetOnClickAction(async delegate {
                Toast.Show("Saving..");
                await TaskV2.Delay(500); // Wait for potential pending throttled actions to update the model
            });
        }

    }

}